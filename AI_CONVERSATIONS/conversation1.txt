# Conversation Title: Upgrading to the OpenWeatherMap API (Extension Option)
# Date: October 15, 2025
# Summary: This conversation documents a major refactor, replacing the basic 'fetch-my-weather' package with a custom implementation using the OpenWeatherMap API. This fulfills the 'Extension Option' requirement.
# AI: Gemini
---

Me:
I'd like to apply the 'Extension Option' to my code now.
Could you help me replace the current implementation with a solution that uses the OpenWeatherMap API?
I'll need to make sure I'm handling the API key securely and that the code has robust error handling.

---

AI:
Excellent choice! Switching to the OpenWeatherMap API is a great way to meet the extension requirements. Here is a complete guide to replacing your implementation.



### BEFORE:
```python
# The initial implementation used the simple 'fetch_my_weather' library.
# It was easy to use but offered less control and less detailed data.
from fetch_my_weather import get_weather

def get_weather_data(location, forecast_days=5):
    """
    Retrieve weather data for a specified location.
    """
    try:
        weather_data = get_weather(location)
        return weather_data
    except Exception as e:
        print(f"Sorry, I couldn't retrieve weather data for '{location}'. Error: {e}")
        return None



### AFTER:
# The new implementation calls the OpenWeatherMap API directly.
# This version requires handling API keys, making network requests, and processing complex JSON data.
import requests
import os
from datetime import datetime

def get_weather_data(location, forecast_days=5):
    """
    Retrieve weather data from the OpenWeatherMap API.
    """
    api_key = os.environ.get("OPENWEATHER_API_KEY")
    if not api_key:
        print("Error: OPENWEATHER_API_KEY not found.")
        return None

    base_url = "[https://api.openweathermap.org/data/2.5/forecast](https://api.openweathermap.org/data/2.5/forecast)"
    params = {'q': location, 'appid': api_key, 'units': 'metric'}

    try:
        response = requests.get(base_url, params=params)
        response.raise_for_status()
        raw_data = response.json()

        # Process the complex raw data into a clean dictionary
        current = raw_data['list'][0]
        processed_data = {
            'current_condition': {
                'description': current['weather'][0]['description'],
                'temp_c': int(current['main']['temp'])
            },
            'forecast': []
        }
        daily_forecasts = {}
        for item in raw_data['list']:
            date = item['dt_txt'].split(' ')[0]
            if date not in daily_forecasts:
                daily_forecasts[date] = {
                    'date': date,
                    'max_temp_c': int(item['main']['temp_max']),
                    'min_temp_c': int(item['main']['temp_min'])
                }

        processed_data['forecast'] = list(daily_forecasts.values())[:forecast_days]
        return processed_data

    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None

# === AI Conversation ===
# Conversation 1 — Upgrading to OpenWeatherMap API (Extension Option)
#
# User:
# I want to upgrade my assignment to use the real OpenWeatherMap 5‑day forecast API. Can you restate the task and list the exact inputs/outputs I should design for so I don’t overbuild?
#
# AI:
# “You’ll add a network layer that queries api.openweathermap.org/data/2.5/forecast and returns tidy data for your existing UI.
# Inputs: location string, units (metric/imperial), forecast_days (1–5), API key via environment.
# Outputs: current conditions + daily rows (date, description, min/max temp, rain chance), plus a ‘data freshness’ timestamp.”
#
# User:
# What’s the minimal JSON I need from the response to support a 3–5 day forecast and a simple ‘current’ box?
#
# AI:
# “From each list item: dt_txt, main.temp_min, main.temp_max, main.feels_like, main.humidity, weather[0].description, and pop. For the ‘current’ panel, reuse the first time‑slot.”
#
# User:
# List failure modes and user‑facing messages.
#
# AI:
# 401 → “Unauthorized: check your API key.”
# 404 → “Invalid location. Try again.”
# Timeout → “Request timed out. Retry.”
# Unexpected → “We hit an error. Please try later.”


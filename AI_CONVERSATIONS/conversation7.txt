# Conversation Title: Building the Main User Interface
# Date: October 19, 2025
# Summary: This conversation documents the process of creating the main user interface and application loop. It demonstrates guiding the AI from a high-level concept to a full implementation using pyinputplus, integrating all the previously built components (data, visualizations, and chat) into a single, cohesive application.

AI: Gemini

Me:
I have my data fetching, visualization, and natural language functions complete. Now I need to build the main user interface to tie them all together

My plan is to create a main menu using pyinputplus that offers three choices:

Get a full forecast with charts for a specific location.

Enter the conversational 'Weather Advisor' chat mode.

Exit the application.

Can you help me start by creating a function for the main menu?"

AI:
That's a great, clear plan. Using pyinputplus for the menu is the perfect approach for this. Here is a function display_main_menu() that presents your specified options and returns the user's choice.


def display_main_menu():
    """Displays the main menu and returns the user's choice."""
    options = [
        "Get Weather Forecast & Visualisations",
        "Ask the Weather Advisor (Chat)",
        "Exit"
    ]
    choice = pyip.inputMenu(
        prompt="Please select an option:\\n",
        choices=options,
        numbered=True
    )
    return choice


Me:
 Now, let's build the main application loop around that menu. I need a primary function, let's call it run_weather_dashboard, that will run a while True loop. Inside the loop, it should call display_main_menu() and then use an if/elif/else block to handle the choice.

For now, just put placeholder comments for what each choice will do. Also, please add a welcome message function.

AI:
"Excellent. Structuring the application with a main loop is the right way to go. Here is the code for the run_weather_dashboard function with the structure you requested, including a display_welcome_message helper."

def display_welcome_message():
    """Displays the initial welcome message."""
    print("Welcome to the Weather Advisor!")

def run_weather_dashboard():
    """The main function to run the application."""
    display_welcome_message()
    
    while True:
        choice = display_main_menu()
        
        if choice == "Get Weather Forecast & Visualisations":
            # Placeholder for forecast logic
            print("Forecast logic will go here...")
            input("Press Enter to continue...") # Pause for now
        elif choice == "Ask the Weather Advisor (Chat)":
            # Placeholder for chat logic
            print("Chat logic will go here...")
            input("Press Enter to continue...") # Pause for now
        elif choice == "Exit":
            print("Goodbye!")
            break


Me:
let's implement the 'Get Forecast' logic. I want to create a separate function handle_location_choice to keep the main loop clean. This new function should:

Prompt the user for a location using pyip.inputStr.

Call my existing get_weather_data(location) function.

If the data is valid, it should display the DataFrame and then call my create_temperature_visualisation() and create_precipitation_visualisation() functions.

Finally, it should wait for the user to press Enter before returning.

Please integrate this new function into the main loop. Also, let's make the welcome message more polished and rename the app to 'Weather Wizard Dashboard'.

AI:
"That's a fantastic idea to modularize the location handling. It makes the code much more readable. I've created the handle_location_choice function as you described and updated the main loop to call it. I've also updated the welcome message with the new title."

### BEFORE:

# The previous version had placeholder logic in the main loop.
def run_weather_dashboard():
    display_welcome_message()
    while True:
        choice = display_main_menu()
        if choice == "Get Weather Forecast & Visualisations":
            print("Forecast logic will go here...")
            input("Press Enter...")
        # ... other placeholders


### AFTER:

# The new version has a dedicated handler function and integrates all components.

def display_welcome_message():
    """Displays the initial welcome message for the dashboard."""
    clear_screen()
    print("=" * 60)
    print("               WEATHER WIZARD DASHBOARD")
    print("=" * 60)
    print("\\nWelcome! Choose an option below to get started.")

def handle_location_choice():
    """Handles the workflow for fetching and displaying weather for a location."""
    try:
        location = pyip.inputStr("Please enter a location (e.g., 'Perth, AU'):\\n> ")
        print(f"\\nFetching weather data for {location}...")
        weather_df = get_weather_data(location)

        if weather_df is not None and not weather_df.empty:
            clear_screen()
            print(f"--- 5-Day Forecast for {location.title()} ---")
            display(weather_df)
            
            print("\\nGenerating visualizations...")
            create_temperature_visualisation(weather_df, location)
            create_precipitation_visualisation(weather_df, location)
            
            input("\\nPress Enter to return to the main menu...")
        else:
            print("Returning to the main menu.")
            time.sleep(2)

    except (pyip.TimeoutException, pyip.RetryLimitException):
        print("\\nInput timed out. Returning to menu.")
        time.sleep(2)

def run_weather_dashboard():
    """The main function to run the entire application."""
    display_welcome_message()
    
    while True:
        choice = display_main_menu()
        
        if choice == "Get Weather Forecast & Visualisations":
            handle_location_choice()
        elif choice == "Ask the Weather Advisor (Chat)":
            clear_screen()
            run_weather_advisor_chat() # Now calls the existing chat function
        elif choice == "Exit":
            print("\\nThank you for using the Weather Wizard. Goodbye!")
            break
        
        display_welcome_message()
